// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import {ERC4883} from "./ERC4883.sol";
import {IERC4883} from "./IERC4883.sol";
import {Colours} from "./Colours.sol";
import {Base64} from "@openzeppelin/contracts/utils//Base64.sol";
import {Strings} from "@openzeppelin/contracts/utils/Strings.sol";
import {IERC165} from "@openzeppelin/contracts/interfaces/IERC165.sol";

contract PartyThought is ERC4883, Colours {
    /// ERRORS

    /// EVENTS

    constructor()
        ERC4883("Party Thought", "THGHT", 0.000888 ether, 0xeB10511109053787b3ED6cc02d5Cb67A265806cC, 200, 2020)
    {}

    function _generateDescription(uint256 tokenId) internal view virtual override returns (string memory) {
        return
        "Thought balloon emoji designed by OpenMoji (the open-source emoji and icon project). License: CC BY-SA 4.0";
    }

    function _generateAttributes(uint256 tokenId) internal view virtual override returns (string memory) {
        string memory attributes = string.concat('{"trait_type": "colour", "value": "', _generateColour(tokenId), '"}');

        return string.concat('"attributes": [', attributes, "]");
    }

    function _generateSVG(uint256 tokenId) internal view virtual override returns (string memory) {
        string memory svg = string.concat(
            '<svg id="party-thought" width="500" height="500" viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">',
            _generateSVGBody(tokenId),
            "</svg>"
        );

        return svg;
    }

    function _generateSVGBody(uint256 tokenId) internal view virtual override returns (string memory) {
        string memory colourValue = _generateColour(tokenId);

        return string.concat(
            '<g id="party-thought-',
            Strings.toString(tokenId),
            '" fill="none">' "<desc>Thought balloon emoji designed by OpenMoji. License: CC BY-SA 4.0</desc>"
            '<path d="M357.352 98.825C358.666 86.468 369.748 77.5152 382.102 78.8292C384.085 79.0398 385.966 79.5263 387.745 80.2047C390.911 63.0237 406.805 50.9097 424.465 52.7772C439.552 54.3805 451.263 65.6922 454.03 79.8447C454.898 79.8361 455.772 79.8636 456.656 79.9574C469.013 81.2705 477.966 92.3526 476.652 104.707C475.901 111.775 471.947 117.717 466.396 121.274C466.545 123.272 466.545 125.306 466.326 127.369C464.356 145.905 447.734 159.342 429.201 157.362C421.15 156.506 414.07 152.882 408.789 147.543C406.929 149.024 404.836 152.464 402.583 153.301C390.319 156.142 378.711 151.18 373.108 141.299C370.764 137.296 371.883 132.535 372.411 127.567C372.588 125.903 372.955 124.307 373.466 122.784C363.186 119.809 356.195 109.828 357.365 98.8214L357.352 98.825Z" fill="white"/>'
            '<path d="M387.984 100.027H392.953C394.297 100.027 395.328 100.133 396.047 100.344C396.773 100.555 397.316 100.859 397.676 101.258C398.043 101.656 398.289 102.141 398.414 102.711C398.547 103.273 398.613 104.148 398.613 105.336V106.988C398.613 108.199 398.488 109.082 398.238 109.637C397.988 110.191 397.527 110.617 396.855 110.914C396.191 111.211 395.32 111.359 394.242 111.359H392.918V119H387.984V100.027ZM392.918 103.273V108.102C393.059 108.109 393.18 108.113 393.281 108.113C393.734 108.113 394.047 108.004 394.219 107.785C394.398 107.559 394.488 107.094 394.488 106.391V104.832C394.488 104.184 394.387 103.762 394.184 103.566C393.98 103.371 393.559 103.273 392.918 103.273ZM404.121 109.473H399.68V108.43C399.68 107.227 399.816 106.301 400.09 105.652C400.371 104.996 400.93 104.418 401.766 103.918C402.602 103.418 403.688 103.168 405.023 103.168C406.625 103.168 407.832 103.453 408.645 104.023C409.457 104.586 409.945 105.281 410.109 106.109C410.273 106.93 410.355 108.625 410.355 111.195V119H405.75V117.617C405.461 118.172 405.086 118.59 404.625 118.871C404.172 119.145 403.629 119.281 402.996 119.281C402.168 119.281 401.406 119.051 400.711 118.59C400.023 118.121 399.68 117.102 399.68 115.531V114.254C399.68 113.09 399.863 112.297 400.23 111.875C400.598 111.453 401.508 110.961 402.961 110.398C404.516 109.789 405.348 109.379 405.457 109.168C405.566 108.957 405.621 108.527 405.621 107.879C405.621 107.066 405.559 106.539 405.434 106.297C405.316 106.047 405.117 105.922 404.836 105.922C404.516 105.922 404.316 106.027 404.238 106.238C404.16 106.441 404.121 106.977 404.121 107.844V109.473ZM405.621 111.605C404.863 112.16 404.422 112.625 404.297 113C404.18 113.375 404.121 113.914 404.121 114.617C404.121 115.422 404.172 115.941 404.273 116.176C404.383 116.41 404.594 116.527 404.906 116.527C405.203 116.527 405.395 116.438 405.48 116.258C405.574 116.07 405.621 115.586 405.621 114.805V111.605ZM416.719 103.449L416.531 105.488C417.219 104.027 418.215 103.254 419.52 103.168V108.641C418.652 108.641 418.016 108.758 417.609 108.992C417.203 109.227 416.953 109.555 416.859 109.977C416.766 110.391 416.719 111.352 416.719 112.859V119H411.984V103.449H416.719ZM426.023 101.375V103.824H427.301V106.285H426.023V114.605C426.023 115.629 426.074 116.199 426.176 116.316C426.285 116.434 426.727 116.492 427.5 116.492V119H425.59C424.512 119 423.742 118.957 423.281 118.871C422.82 118.777 422.414 118.57 422.062 118.25C421.711 117.922 421.492 117.551 421.406 117.137C421.32 116.715 421.277 115.73 421.277 114.184V106.285H420.258V103.824H421.277V101.375H426.023ZM438.75 103.449L437.391 114.699C437.18 116.48 437 117.695 436.852 118.344C436.711 118.992 436.473 119.527 436.137 119.949C435.801 120.371 435.332 120.68 434.73 120.875C434.137 121.078 433.184 121.18 431.871 121.18H429V118.695C429.734 118.695 430.207 118.66 430.418 118.59C430.629 118.512 430.734 118.344 430.734 118.086C430.734 117.961 430.637 117.418 430.441 116.457L427.852 103.449H432.152L433.699 113.938L434.449 103.449H438.75ZM444.797 100.027L444.023 114.312H440.367L439.594 100.027H444.797ZM444.41 115.203V119H439.98V115.203H444.41Z" fill="black"/>'
            '<path d="M384.352 150.732C389.316 150.732 393.352 154.769 393.352 159.732C393.352 164.696 389.316 168.732 384.352 168.732C379.389 168.732 375.352 164.696 375.352 159.732C375.352 154.769 379.389 150.732 384.352 150.732Z" fill="white"/>'
            '<path d="M363.81 172.648C365.217 172.648 366.364 173.792 366.364 175.201C366.364 176.61 365.218 177.755 363.81 177.755C362.402 177.755 361.256 176.61 361.256 175.201C361.256 173.793 362.402 172.648 363.81 172.648V172.648Z" fill="white"/>'
            '<path d="M384.352 173.233C391.798 173.233 397.852 167.178 397.852 159.733C397.852 152.287 391.798 146.233 384.352 146.233C376.907 146.233 370.852 152.287 370.852 159.733C370.852 167.178 376.907 173.233 384.352 173.233ZM384.352 150.733C389.316 150.733 393.352 154.769 393.352 159.733C393.352 164.696 389.316 168.733 384.352 168.733C379.389 168.733 375.352 164.696 375.352 159.733C375.352 154.769 379.389 150.733 384.352 150.733Z" fill="black"/>'
            '<path d="M363.81 182.255C367.698 182.255 370.864 179.092 370.864 175.201C370.864 171.311 367.7 168.148 363.81 168.148C359.92 168.148 356.756 171.311 356.756 175.201C356.756 179.092 359.92 182.255 363.81 182.255ZM363.81 172.648C365.217 172.648 366.364 173.792 366.364 175.201C366.364 176.61 365.218 177.755 363.81 177.755C362.402 177.755 361.256 176.61 361.256 175.201C361.256 173.793 362.402 172.648 363.81 172.648Z" fill="black"/>'
            '<path d="M375.353 141.305C373.008 137.302 371.879 132.541 372.405 127.573C372.582 125.909 372.949 124.313 373.46 122.79C363.179 119.815 356.189 109.834 357.359 98.8272C358.672 86.4702 369.754 77.5175 382.109 78.8315C384.091 79.0421 385.972 79.5286 387.752 80.2069C390.917 63.0259 406.811 50.9119 424.472 52.7794C439.56 54.3828 451.269 65.6944 454.037 79.8469C454.904 79.8384 455.778 79.8658 456.662 79.9596C469.019 81.2727 477.972 92.3549 476.658 104.71C475.907 111.777 471.953 117.719 466.403 121.276C466.551 123.275 466.551 125.308 466.332 127.372C464.362 145.907 447.74 159.344 429.207 157.364C421.156 156.509 414.075 152.884 408.795 147.545C406.934 149.027 404.841 150.216 402.589 151.053" stroke="black" stroke-width="4.5" stroke-miterlimit="10" stroke-linecap="round" stroke-linejoin="round"/>'
            "</g>"
        );
    }

    function _generateColour(uint256 tokenId) internal view returns (string memory) {
        uint256 id = uint256(keccak256(abi.encodePacked("Crown", address(this), Strings.toString(tokenId))));
        id = id % colours.length;
        return colours[id];
    }
}
